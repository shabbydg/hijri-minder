// Mocks generated by Mockito 5.4.6 from annotations
// in hijri_minder/test/screens/settings_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:geolocator/geolocator.dart' as _i7;
import 'package:hijri_minder/models/app_settings.dart' as _i2;
import 'package:hijri_minder/models/reminder.dart' as _i9;
import 'package:hijri_minder/services/location_service.dart' as _i6;
import 'package:hijri_minder/services/notification_service.dart' as _i8;
import 'package:hijri_minder/services/settings_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeAppSettings_0 extends _i1.SmartFake implements _i2.AppSettings {
  _FakeAppSettings_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i4.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.AppSettings> getSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getSettings, []),
            returnValue: _i3.Future<_i2.AppSettings>.value(
              _FakeAppSettings_0(this, Invocation.method(#getSettings, [])),
            ),
          )
          as _i3.Future<_i2.AppSettings>);

  @override
  _i3.Future<bool> saveSettings(_i2.AppSettings? settings) =>
      (super.noSuchMethod(
            Invocation.method(#saveSettings, [settings]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateSetting<T>(String? key, T? value) =>
      (super.noSuchMethod(
            Invocation.method(#updateSetting, [key, value]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> resetToDefault() =>
      (super.noSuchMethod(
            Invocation.method(#resetToDefault, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<T> getSetting<T>(String? key, T? defaultValue) =>
      (super.noSuchMethod(
            Invocation.method(#getSetting, [key, defaultValue]),
            returnValue:
                _i5.ifNotNull(
                  _i5.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#getSetting, [key, defaultValue]),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_1<T>(
                  this,
                  Invocation.method(#getSetting, [key, defaultValue]),
                ),
          )
          as _i3.Future<T>);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i6.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> requestLocationPermissionWithDialog() =>
      (super.noSuchMethod(
            Invocation.method(#requestLocationPermissionWithDialog, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<_i7.Position?> getCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocation, []),
            returnValue: _i3.Future<_i7.Position?>.value(),
          )
          as _i3.Future<_i7.Position?>);

  @override
  _i3.Future<bool> isLocationServiceEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isLocationServiceEnabled, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<_i7.Position?> getLastKnownLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getLastKnownLocation, []),
            returnValue: _i3.Future<_i7.Position?>.value(),
          )
          as _i3.Future<_i7.Position?>);

  @override
  _i3.Future<bool> hasValidLocationPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#hasValidLocationPermissions, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  double calculateDistance(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#calculateDistance, [
              startLatitude,
              startLongitude,
              endLatitude,
              endLongitude,
            ]),
            returnValue: 0.0,
          )
          as double);

  @override
  String getLocationName(double? latitude, double? longitude) =>
      (super.noSuchMethod(
            Invocation.method(#getLocationName, [latitude, longitude]),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#getLocationName, [latitude, longitude]),
            ),
          )
          as String);

  @override
  Map<String, dynamic> getFallbackLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getFallbackLocation, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Future<Map<String, dynamic>> getBestAvailableLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getBestAvailableLocation, []),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i8.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> requestPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermissions, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> areNotificationsEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#areNotificationsEnabled, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> schedulePrayerNotifications(
    dynamic prayerTimes,
    _i2.AppSettings? settings,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#schedulePrayerNotifications, [
              prayerTimes,
              settings,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> scheduleReminderNotification(_i9.Reminder? reminder) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleReminderNotification, [reminder]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cancelPrayerNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#cancelPrayerNotifications, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cancelReminderNotification(String? reminderId) =>
      (super.noSuchMethod(
            Invocation.method(#cancelReminderNotification, [reminderId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cancelAllNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAllNotifications, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> showTestNotification() =>
      (super.noSuchMethod(
            Invocation.method(#showTestNotification, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
